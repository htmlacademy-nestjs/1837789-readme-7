// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PostType {
  Video
  Text
  Quotation
  Photo
  Link
}

enum PostStatus {
  Published
  Draft
}

model Post {
  id              String     @id @default(uuid()) @map("id")
  originalId      String?    @map("original_id")
  type            PostType
  status          PostStatus
  userId          String     @map("user_id") @db.VarChar(100)
  originalUserId  String?    @map("original_author_id") @db.VarChar(100)
  title           String     @db.VarChar(255)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  tags            String[]   @db.VarChar(10)
  isRepost        Boolean    @default(false) @map("is_reposted")
  likes           String[]   @db.VarChar(100)
  likesCount      Int        @default(0) @map("likes_count")
  comments        Comment[]
  name            String?
  urlVideo        String?
  annoncement     String?
  text            String?
  textQuotation   String?    @map("quoted_text")
  authorQuotation String?    @map("quoted_autor")
  photo           String?
  urlLink         String?    @map("link_url")
  description     String?

  @@index([title])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  message   String
  userId    String   @map("user_id") @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id") @db.VarChar(100)

  @@index([postId])
  @@map("comments")
}
